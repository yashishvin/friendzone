package	Graph;

import java.io.File;
import java.util.List;
import java.util.Set;

/**
 * Filename:    SocialNetworkADT.java
 * Project:     Social Network
 * Authors:     Zhihao Shu
 *              Han Lintong
 *              Lakshay Goyal
 *              Sai Teja
 * Email: 	zshu9@wisc.edu
 *              lhan48@wisc.edu
 *              lgoyal@wisc.edu
 *              chokkarapu@wisc.edu
 * 
 * A simple graph interface (DO NOT edit this file)
 *
 */

public interface SocialNetworkADT {
	
	// check if any user is null 
	// if the user null then throw NullPointerException
	// add both users if any users is not present
	// if both users already exists
	// add a relationship between the the two users
	public boolean addFriends(String f1, String f2);
	
	// check if any user is null 
	// if any user null then throw NullPointerException
	// check if both users exists
	// if any of the users doesn't exists throw an Exception
	// check if the relationship exists between both users
	// if a relationship exists then remove the relationship between the two
	// if a relationship doesn't exists then do nothing 
	public boolean removeFriends(String f1, String f2);
	
	// check if any user is null 
	// if any user null then throw NullPointerException
	// check if user is already present 
	// if user is present then throw an error
	// if user not present add user 
	public boolean addUser(String u1);
	
	// check if any user is null 
	// if any user null then throw NullPointerException
	// check if the user is present, 
	// if user is present then remove the user and all its relationships
	// if user not present throw an error
	public boolean removeUser(String u1);

	// check if user is null
	// if user null throw an exception
	// check if user is present
	// if user present then return a set of Persons containing all the people who have relationship with that particular user
	// if user not present throw an empty set
	public Set<Person> getFriends(String u1);
	
	// check if any user is null
	// if any user null throw an exception
	// check if  both user are present
	// if both user are present then return a set of Persons containing all the people who have relationship with both user
	// if any user is not present throw an empty set
	public Set<Person> getMutualFriends(String f1, String f2);
	
	// check if any user is null
	// if any user null throw an exception
	// check if  both user are present
	// if both user are present then return aList of Persons containing the shortest path between both the users
	// if any user is not present throw an empty set
	public List<Person> getShortestPath(String f1, String f2);
	
	public Set<Graph> getConnectedComponents();
	
	// load the data from file
	// parse the file
	// and 
	public void loadFromFile(File f1);
	public void saveToFile(File f1);
	

 
	
}
